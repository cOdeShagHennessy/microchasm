/**
* <%= userName %> generated on <% var date = new Date()%><%=date.toLocaleString()%> using slush-mChasm.
* Author:<%= authorName %>
* Email:<%= authorEmail %>
* Overrides to topology configuration for each process-env.NODE_ENV supported
*/
module.exports.Config = function (environment) {
    var _config = {
        projectName: "<%=nsNameSlug%>",
        filter: environment,
        environment: {
            $filter: 'env',
            //<% if(envDEV){ %> NODE_ENV=development
            development: {
                nanostack: {<% _.forEach(fields, function(field) { if (field.override) {%>
                    <%=field.name%>: <%switch (field.type) { case 'string': %>"<%=field.defValue%>",<%break;case 'date': %>Date.now(),<%break; default: %><%=field.defValue%>, <%}%>//TODO:Override me! <%}%> <% }); %>
                }
            },//<% } %><% if(envLDOCKER){ %> NODE_ENV=local_docker
            local_docker: {
                nanostack: {<% _.forEach(fields, function(field) { if (field.override) {%>
                    <%=field.name%>: <%switch (field.type) { case 'string': %>"<%=field.defValue%>",<%break;case 'date': %>Date.now(),<%break; default: %><%=field.defValue%>, <%}%>//TODO:Override me! <%}%> <% }); %>
                }
            },//<% } %><% if(envPROD){ %> NODE_ENV=production
            production: {
                nanostack: {<% _.forEach(fields, function(field) { if (field.override) {%>
                    <%=field.name%>: <%switch (field.type) { case 'string': %>"<%=field.defValue%>",<%break;case 'date': %>Date.now(),<%break; default: %><%=field.defValue%>, <%}%>//TODO:Override me! <%}%> <% }); %>
                }
            },//<% } %><% if(envTEST){ %> NODE_ENV=test
            test: {
                nanostack: {<% _.forEach(fields, function(field) { if (field.override) {%>
                    <%=field.name%>: <%switch (field.type) { case 'string': %>"<%=field.defValue%>",<%break;case 'date': %>Date.now(),<%break; default: %><%=field.defValue%>, <%}%>//TODO:Override me! <%}%> <% }); %>
                }
            },// <% } %>
            $default: {
                nanostack: { // this accepts the base configuration
                }
            }
        }
    }
    return _config;
};
